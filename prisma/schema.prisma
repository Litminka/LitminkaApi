// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  email                  String                   @unique
  login                  String                   @unique
  password               String
  name                   String?
  roleId                 Int
  role                   Role                     @relation(fields: [roleId], references: [id])
  integration            Integration?
  shikimoriLink          ShikimoriLinkToken?
  sessionTokens          SessionToken[]
  animeList              AnimeList[]
  follows                Follow[]
  UserAnimeNotifications UserAnimeNotifications[]
  ownedGroups            GroupList[]
  groupMember            GroupListMembers[]
  groupInvites           GroupListInvites[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[]
  users       User[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[]
}

model SessionToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Integration {
  id                    Int     @id @default(autoincrement())
  shikimoriToken        String?
  shikimoriRefreshToken String?
  shikimoriCode         String?
  shikimoriId           Int?    @unique
  discordId             String?
  telegramId            String?
  vkId                  String?
  userId                Int     @unique
  user                  User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model ShikimoriLinkToken {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  token  String @unique
}

model Anime {
  id                     Int                      @id @default(autoincrement())
  shikimoriId            Int                      @unique
  image                  String?
  japaneseName           String?
  englishName            String?
  name                   String?
  description            String?
  slug                   String                   @unique
  status                 String
  rpaRating              String?
  mediaType              String?
  season                 String?
  maxEpisodes            Int
  currentEpisodes        Int
  firstEpisodeAired      DateTime?
  lastEpisodeAired       DateTime?
  shikimoriRating        Float
  rating                 Float                    @default(0)
  franchiseName          String?
  kodikLink              String?
  censored               Boolean                  @default(false)
  banned                 Boolean                  @default(false)
  hasRelation            Boolean                  @default(false)
  genres                 Genre[]
  animeTranslations      AnimeTranslation[]
  animeLists             AnimeList[]
  follows                Follow[]
  userAnimeNotifications UserAnimeNotifications[]
  animeNotifications     AnimeNotifications[]
  groupLists             GroupAnimeList[]
  relations              AnimeRelation[]          @relation(name: "animeRelation")
  relatesTo              AnimeRelation[]          @relation(name: "relatedAnimeRelation")
}

model AnimeRelation {
  id           Int    @id @default(autoincrement())
  animeId      Int
  relatedTo    Int
  name         String
  relatedAnime Anime  @relation(fields: [animeId], references: [shikimoriId], name: "animeRelation")
  anime        Anime  @relation(fields: [relatedTo], references: [shikimoriId], name: "relatedAnimeRelation")
}

model Genre {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  anime Anime[]
}

model AnimeTranslation {
  id              Int      @id @default(autoincrement())
  currentEpisodes Int
  groupId         Int
  link            String   
  group           Group    @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  animeId         Int
  anime           Anime    @relation(fields: [animeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  follow          Follow[]
}

model Group {
  id                     Int                      @id
  name                   String                   @unique
  type                   String
  AnimeTranslation       AnimeTranslation[]
  UserAnimeNotifications UserAnimeNotifications[]
  animeNotifications     AnimeNotifications[]
}

model Follow {
  id            Int               @id @default(autoincrement())
  status        String
  userId        Int
  user          User              @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  animeId       Int
  anime         Anime             @relation(fields: [animeId], references: [id])
  translationId Int?
  translation   AnimeTranslation? @relation(fields: [translationId], references: [id])
}

model AnimeList {
  id              Int     @id @default(autoincrement())
  animeId         Int
  anime           Anime   @relation(fields: [animeId], references: [id])
  userId          Int
  user            User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  status          String
  isFavorite      Boolean
  watchedEpisodes Int
  rating          Int?
}

model GroupList {
  id          Int                @id @default(autoincrement())
  owner       User               @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ownerId     Int
  description String
  name        String
  list        GroupAnimeList[]
  members     GroupListMembers[]
  invites     GroupListInvites[]
}

model GroupListInvites {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  Int
  groupId Int
  group   GroupList @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupListMembers {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       Int
  groupId      Int
  group        GroupList @relation(fields: [groupId], references: [id], onDelete: Cascade)
  overrideList Boolean   @default(false)
}

model GroupAnimeList {
  id              Int       @id @default(autoincrement())
  animeId         Int
  anime           Anime     @relation(fields: [animeId], references: [id])
  groupId         Int
  group           GroupList @relation(fields: [groupId], references: [id], onDelete: Cascade)
  status          String
  isFavorite      Boolean
  watchedEpisodes Int
  rating          Int?
}

model UserAnimeNotifications {
  id        Int      @id @default(autoincrement())
  animeId   Int
  anime     Anime    @relation(fields: [animeId], references: [id])
  status    String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  episode   Int?
  groupId   Int?
  group     Group?   @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AnimeNotifications {
  id        Int      @id @default(autoincrement())
  animeId   Int
  anime     Anime    @relation(fields: [animeId], references: [id])
  status    String
  episode   Int?
  groupId   Int?
  group     Group?   @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
}
