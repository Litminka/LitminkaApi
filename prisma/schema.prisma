generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                      @id @default(autoincrement())
  email              String                   @unique
  login              String                   @unique
  password           String
  name               String?
  createdAt          DateTime                 @default(now())
  roleId             Int
  animeList          AnimeList[]
  follows            Follow[]
  ownedGroups        GroupList[]
  groupInvites       GroupListInvites[]
  groupMember        GroupListMembers[]
  integration        Integration?
  sessionTokens      SessionToken[]
  shikimoriLink      ShikimoriLinkToken?
  role               Role                     @relation(fields: [roleId], references: [id])
  animeNotifications UserAnimeNotifications[]
  settings           UserSettings?
}

model UserSettings {
  id                        Int     @id @default(autoincrement())
  watchListMode             String  @default("auto")
  watchListAddAfterEpisodes Int     @default(3)
  watchListAskAboutRating   Boolean @default(true)
  showCensoredContent       Boolean @default(false)
  notifyDiscord             Boolean @default(false)
  notifyPush                Boolean @default(false)
  notifyTelegram            Boolean @default(false)
  notifyVK                  Boolean @default(false)
  siteTheme                 String  @default("dark")
  userId                    Int     @unique
  shikimoriExportList       Boolean @default(false)
  user                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  permissions Permission[] @relation("PermissionToRole")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[] @relation("PermissionToRole")
}

model SessionToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Integration {
  id                     Int      @id @default(autoincrement())
  discordId              String?
  shikimoriCode          String?
  shikimoriId            Int?     @unique
  shikimoriRefreshToken  String?
  shikimoriToken         String?
  telegramId             String?
  userId                 Int      @unique
  vkId                   String?
  shikimoriCanChangeList Boolean? @default(false)
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShikimoriLinkToken {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  token  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Anime {
  id                     Int                      @id @default(autoincrement())
  image                  String?
  name                   String?
  description            String?
  status                 String
  slug                   String                   @unique
  currentEpisodes        Int
  englishName            String?
  firstEpisodeAired      DateTime?
  franchiseName          String?
  japaneseName           String?
  kodikLink              String?
  lastEpisodeAired       DateTime?
  maxEpisodes            Int
  mediaType              String?
  rpaRating              String?
  shikimoriId            Int                      @unique
  shikimoriRating        Float
  banned                 Boolean                  @default(false)
  censored               Boolean                  @default(false)
  hasRelation            Boolean                  @default(false)
  rating                 Float                    @default(0)
  season                 String?
  animeLists             AnimeList[]
  animeNotifications     AnimeNotifications[]
  relations              AnimeRelation[]          @relation("animeRelation")
  relatesTo              AnimeRelation[]          @relation("relatedAnimeRelation")
  animeTranslations      AnimeTranslation[]
  follows                Follow[]
  groupLists             GroupAnimeList[]
  userAnimeNotifications UserAnimeNotifications[]
  genres                 Genre[]                  @relation("AnimeToGenre")
}

model AnimeRelation {
  id           Int    @id @default(autoincrement())
  animeId      Int
  name         String
  relatedTo    Int
  relatedAnime Anime  @relation("animeRelation", fields: [animeId], references: [shikimoriId])
  anime        Anime  @relation("relatedAnimeRelation", fields: [relatedTo], references: [shikimoriId])
}

model Genre {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  nameRussian String  @unique
  anime       Anime[] @relation("AnimeToGenre")
  kind        String  @default("genre")
}

model AnimeTranslation {
  id              Int      @id @default(autoincrement())
  currentEpisodes Int
  groupId         Int
  animeId         Int
  link            String
  anime           Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  group           Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  follow          Follow[]
}

model Group {
  id                     Int                      @id
  type                   String
  name                   String                   @unique
  animeNotifications     AnimeNotifications[]
  AnimeTranslation       AnimeTranslation[]
  UserAnimeNotifications UserAnimeNotifications[]
}

model Follow {
  id            Int               @id @default(autoincrement())
  status        String
  animeId       Int
  translationId Int?
  userId        Int
  anime         Anime             @relation(fields: [animeId], references: [id])
  translation   AnimeTranslation? @relation(fields: [translationId], references: [id])
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnimeList {
  id              Int     @id @default(autoincrement())
  animeId         Int
  userId          Int
  status          String
  isFavorite      Boolean
  watchedEpisodes Int
  rating          Int?
  shikimoriId     Int?    @unique
  anime           Anime   @relation(fields: [animeId], references: [id])
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupList {
  id          Int                @id @default(autoincrement())
  ownerId     Int
  description String
  name        String
  list        GroupAnimeList[]
  owner       User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  invites     GroupListInvites[]
  members     GroupListMembers[]
}

model GroupListInvites {
  id      Int       @id @default(autoincrement())
  userId  Int
  groupId Int
  group   GroupList @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupListMembers {
  id           Int       @id @default(autoincrement())
  userId       Int
  groupId      Int
  overrideList Boolean   @default(false)
  group        GroupList @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupAnimeList {
  id              Int       @id @default(autoincrement())
  animeId         Int
  groupId         Int
  status          String
  isFavorite      Boolean
  watchedEpisodes Int
  rating          Int?
  anime           Anime     @relation(fields: [animeId], references: [id])
  group           GroupList @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model UserAnimeNotifications {
  id        Int      @id @default(autoincrement())
  animeId   Int
  status    String
  userId    Int
  episode   Int?
  groupId   Int?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  anime     Anime    @relation(fields: [animeId], references: [id])
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnimeNotifications {
  id        Int      @id @default(autoincrement())
  animeId   Int
  status    String
  episode   Int?
  groupId   Int?
  createdAt DateTime @default(now())
  anime     Anime    @relation(fields: [animeId], references: [id])
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
