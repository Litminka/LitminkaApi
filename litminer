const fs = require('fs');
const path = require('path');
const { parseArgs } = require('util');

function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

const src = path.relative('./', 'src');
const args = parseArgs({
    options: {
        service: {
            type: "boolean",
            default: false,
            multiple: false,
            short: "s"
        },
        auth: {
            type: "boolean",
            default: false,
            multiple: false,
            short: "a"
        },
        optional: {
            type: "boolean",
            default: false,
            multiple: false,
            short: "o"
        },
        path: {
            type: 'string',
            default: "./",
            multiple: false,
            short: "p"
        }
    }, allowPositionals: true, strict: true
});

const command = args.positionals[0];
const fileName = args.positionals[1];
if (!command) {
    return console.log(`
An utility to create boiler plate files
<usage>
make>command
    make:controller <name> - Creates a controller       --service (-s) Creates Service with the same name
    make:service <name>    - Creates a service
    make:router <name>     - Creates a router
    make:model <name>      - Creates a model extention
    make:request <name>    - Creates a request          --auth (-a) Extends AuthRequest --optional(-o) Extends OptionalRequest
    `)
}
if (!fileName) {
    return console.log('Error: No name specified')
}
const options = args.values;

execute(command, options)

function execute(command, options) {
    if (!command) return console.log("Error: No command")
    const split = command.split(':');
    if (!split[0]) return console.log("Error: No command");
    const commandType = split[0];
    command = split[1];
    if (!command) return console.log(`Error: ${commandType} does not have this command`)
    if (commandType == "make") {
        executeMake(command, options);
    }
}

function executeMake(command, options) {
    switch (command) {
        case 'controller':
            generateGenericFile(command, fileName, options)
            break;
        case 'request':
            generateRequest(command, fileName, options)
            break;
        case 'model':
        case 'router':
        case 'service':
            generateGenericFile(command, fileName);
            break;
        default:
            return console.log('Unknown command')
    }
}

function generateGenericFile(command, fileName, options) {
    const stubPath = `./stubs/${command}.stub`;
    const file = fs.readFileSync(stubPath, { encoding: 'utf8' }).toString();
    fileName = fileName.replaceAll(capitalize(command), '');
    const nw = file.replaceAll(`Stub`, fileName)
    if (typeof options !== "undefined") {
        if (options.service && command !== "service") {
            const serviceName = fileName.replaceAll(capitalize(command), "Service");
            generateGenericFile("service", serviceName);
        }
    }

    const savePath = `${src}/${command}s/${fileName}${capitalize(command)}.ts`;
    if (fs.existsSync(savePath)) return console.error(`File ${savePath} already exists!`);
    console.log(`File: ${savePath} created!`)
    fs.writeFileSync(savePath, nw);
}

function generateRequest(command, fileName, options) {
    let stubPath = `./stubs/${command}.stub`;
    if (typeof options !== undefined) {
        if (options.auth && options.optional) {
            return console.log('Pick one! optional or auth')
        }
        if (options.auth) {
            stubPath = `./stubs/auth${capitalize(command)}.stub`;
        }
        if (options.optional) {
            stubPath = `./stubs/optional${capitalize(command)}.stub`;
        }
    }
    const file = fs.readFileSync(stubPath, { encoding: 'utf8' }).toString();
    let nw = file.replaceAll(`StubRequest`, fileName)
    nw = file.replaceAll(`StubReq`, fileName.replace('Request', "Req"))

    const savePath = `${src}/${command}s/${fileName}${capitalize(command)}.ts`;
    if (fs.existsSync(savePath)) return console.error(`File ${savePath} already exists!`);
    console.log(`File: ${savePath} created!`)
    fs.writeFileSync(savePath, nw);
}
